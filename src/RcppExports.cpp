// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// landmarks_lastfirst_cpp
List landmarks_lastfirst_cpp(const NumericMatrix& x, int num, int cardinality, const int seed_index, const bool cover);
RcppExport SEXP _landmark_landmarks_lastfirst_cpp(SEXP xSEXP, SEXP numSEXP, SEXP cardinalitySEXP, SEXP seed_indexSEXP, SEXP coverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type num(numSEXP);
    Rcpp::traits::input_parameter< int >::type cardinality(cardinalitySEXP);
    Rcpp::traits::input_parameter< const int >::type seed_index(seed_indexSEXP);
    Rcpp::traits::input_parameter< const bool >::type cover(coverSEXP);
    rcpp_result_gen = Rcpp::wrap(landmarks_lastfirst_cpp(x, num, cardinality, seed_index, cover));
    return rcpp_result_gen;
END_RCPP
}
// landmark_maxmin
IntegerVector landmark_maxmin(const NumericMatrix& x, const int num, const int seed_index);
RcppExport SEXP _landmark_landmark_maxmin(SEXP xSEXP, SEXP numSEXP, SEXP seed_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type num(numSEXP);
    Rcpp::traits::input_parameter< const int >::type seed_index(seed_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(landmark_maxmin(x, num, seed_index));
    return rcpp_result_gen;
END_RCPP
}
// landmarks_maxmin_cpp
List landmarks_maxmin_cpp(const NumericMatrix& x, int num, float radius, const int seed_index, const bool cover);
RcppExport SEXP _landmark_landmarks_maxmin_cpp(SEXP xSEXP, SEXP numSEXP, SEXP radiusSEXP, SEXP seed_indexSEXP, SEXP coverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type num(numSEXP);
    Rcpp::traits::input_parameter< float >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const int >::type seed_index(seed_indexSEXP);
    Rcpp::traits::input_parameter< const bool >::type cover(coverSEXP);
    rcpp_result_gen = Rcpp::wrap(landmarks_maxmin_cpp(x, num, radius, seed_index, cover));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_landmark_landmarks_lastfirst_cpp", (DL_FUNC) &_landmark_landmarks_lastfirst_cpp, 5},
    {"_landmark_landmark_maxmin", (DL_FUNC) &_landmark_landmark_maxmin, 3},
    {"_landmark_landmarks_maxmin_cpp", (DL_FUNC) &_landmark_landmarks_maxmin_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_landmark(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
