% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/landmarks-lastfirst.r
\name{landmarks_lastfirst}
\alias{landmarks_lastfirst}
\alias{firstlast}
\alias{lastfirst}
\title{Neighborhood-based Landmark Sets}
\usage{
firstlast(x, y = NULL, dist_method = "euclidean", ties_method = "min")

lastfirst(x, y = NULL, dist_method = "euclidean", ties_method = "min")

landmarks_lastfirst(
  x,
  dist_method = "euclidean",
  ties_method = "min",
  pick_method = "first",
  num = NULL,
  cardinality = NULL,
  frac = FALSE,
  seed_index = 1L,
  engine = NULL,
  cover = FALSE,
  tower = FALSE,
  extend_num = extension(mult = 0, add = 0),
  extend_cardinality = extension(mult = 0, add = 0)
)
}
\arguments{
\item{x}{a data matrix.}

\item{y}{a data matrix of the same dimension as \code{x}; if \code{NULL}, taken to be
\code{x}.}

\item{dist_method}{a character string specifying the distance metric to use;
passed to \code{proxy::dist(method)}. Any distance measure in the \code{proxy}
package is supported.}

\item{ties_method}{a character string specifying the method for handling
ties; passed to \code{rank(ties.method)}. Only \code{"min"} and \code{"max"} have been
tested and are recommended.}

\item{pick_method}{a character string specifying the method for selecting one
among indistinguishable points, either \code{"first"} (the default), \code{"last"},
or \code{"random"}.}

\item{num}{a positive integer; the desired number of landmark points, or of
sets in a neighborhood cover.}

\item{cardinality}{a positive integer; the desired cardinality of each
landmark neighborhood, or of each set in a landmark cover.}

\item{frac}{logical; whether to treat \code{cardinality} as a fraction of the
cardinality of \code{x}.}

\item{seed_index}{an integer (the first landmark to seed the algorithm) or
one of the character strings \code{"random"} (to select a seed uniformly at
random) and \code{"firstlast"} (to select a seed from the firstlast set).}

\item{engine}{character string specifying the implementation to use; one of
\code{"C++"} or \code{"R"}. When not specified, the R engine is used.}

\item{cover}{logical; whether to include a column of cover sets (by member
index) alongside columns of landmark indices and of minimum neighborhood
cardinalities in a data frame.}

\item{tower}{logical; whether to include a column of covers (stored as
maximal simplices of their nerves) alongside columns of landmark indices
and of minimum neighborhood cardinalities in a data frame.}

\item{extend_num, extend_cardinality}{length-two numeric vectors used to
extend landmark parameters for cover set construction. See \code{\link[=extension]{extension()}}.}
}
\description{
Compute landmark sets based on nearest neighborhoods.
}
\details{
These functions adapt the maxmin procedure to produce landmark
points dispersed according to the orders in which they are reached from
each other, rather than to their distances from each other. (Say more.)

One, both, or neither of \code{num} and \code{cardinality} may be passed values. If
neither is specified, then \code{num} is defaulted to the minimum of \code{24L} and
the number of distinct rows of \code{x}. If the values yield neighborhoods that
do not cover \code{x}, then, effectively, \code{num} is increased until the
cardinality necessary to cover \code{x} is at most \code{cardinality}. To generte a
complete landmark set, use \code{cardinality = 1L}.
}
\examples{
set.seed(4)
# small circle sample
X <- tdaunif::sample_circle(n = 6L)
# random seed index
l <- landmarks_lastfirst(X, seed_index = "random")
# plot landmark order at point positions
plot(X, asp = 1, pch = NA)
text(X, labels = order(l))
# add duplicate points
X <- rbind(X, X[sample(nrow(X), 6, replace = TRUE), , drop = FALSE])
# firstlast seed index
l <- landmarks_lastfirst(X, seed_index = "firstlast")
# plot landmark order at point positions
plot(X, asp = 1, pch = NA)
text(X + .1 * cbind(floor((1:12 - 1) / 6) - .5, 0), labels = order(l))
}
\author{
Jason Cory Brunson

Yara Skaf
}
