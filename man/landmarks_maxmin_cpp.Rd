% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{landmarks_maxmin_cpp}
\alias{landmarks_maxmin_cpp}
\alias{landmark_maxmin}
\title{Maxmin in C++}
\usage{
landmark_maxmin(x, num, seed_index = 1L)

landmarks_maxmin_cpp(x, num = 0L, radius = -1, seed_index = 1L, cover = FALSE)
}
\arguments{
\item{x}{a data matrix}

\item{num}{desired number of landmark points, or number of sets, in a ball
cover (should be a positive integer)}

\item{seed_index}{index of the first landmark used to seed the algorithm}

\item{radius}{desired radius of a cover set (should be a positive real number)}

\item{cover}{boolean specifying whether to return cover sets in addition to
the landmark points}
}
\value{
\code{landmark_maxmin()} returns an integer vector of indices of
landmarks. \code{landmarks_maxmin_cpp()} returns a list of one or two members,
depending on \code{cover}: a vector of landmarks, and a list of cover sets,
represented as integer vcetors of indices.
}
\description{
Use the Euclidean maxmin procedure to choose landmarks.
}
\details{
\code{landmark_maxmin()} is a minimal implementation of the \link[=landmarks_maxmin]{maxmin procedure} to choose a given number landmarks.

\code{landmarks_maxmin_cpp()} allows specification of the fixed radius of the
balls about the landmarks rather than their number and provides an option
to collect covers.

Both functions support Euclidean distances only.
}
\author{
Matt Piekenbrock

Jason Cory Brunson

Yara Skaf
}
